"""
Django settings for djangoapi project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

SETTINGS_MODULE = 'local'

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(Path(__file__).resolve().parent.parent)
manage_path = os.path.join(BASE_DIR,"manage.py")
print(f"manage_path EXISTS? {manage_path} \n{os.path.exists(manage_path)}")
print(SETTINGS_MODULE, BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
print('local debug settings:', DEBUG)

ALLOWED_HOSTS = ['0.0.0.0', '127.0.0.1']


# Application definition
winner = 'local_winner'

from djangoapi.transaction_email.production import *

ADMINS = [
    ("Kyle Callaway", "admin@technicallycpa.com")
]

MANAGERS = ADMINS

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party
    'storages',

    # our apps
    'rest_framework',
    'products',
    'carts',
    'accounts',
    'search',
    'orders',
    'tags',
    'billing',
    'addresses',
    'analytics',
    'marketing',
]



AUTH_USER_MODEL = 'accounts.User'  # Changes the built in user model to our custom
print(f'{SETTINGS_MODULE} user model settings:', DEBUG)

#LOGOUT_REDIRECT_URL = '/login/'

FORCE_SESSION_TO_ONE = False
FORCE_INACTIVE_USER_ENDSESSION = False


STRIPE_PUB_KEY = os.environ.get("STRIPE_PUB_KEY")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")


MAILCHIMP_API_KEY = os.environ.get("MAILCHIMP_API_KEY")
MAILCHIMP_DATA_CENTER = 'us7'
MAILCHIMP_EMAIL_LIST_ID = os.environ.get("MAILCHIMP_EMAIL_LIST_ID")


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
LOGOUT_REDIRECT_URL = '/login/'
ROOT_URLCONF = 'djangoapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
print(f'{SETTINGS_MODULE} database model settings:', DATABASES['default'].get('name'))

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'



STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'my_static'),
]


STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR),'static_local_cdn', 'static_root') # 'djangoapp',

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static_local_cdn', 'media_root')

PROTECTED_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_local_cdn","protected")



try:
    print(f'{SETTINGS_MODULE} static files Static Root:', STATIC_ROOT)
    print(f'{SETTINGS_MODULE} static files Media Root:', MEDIA_ROOT)
    print(f'{SETTINGS_MODULE} static files Protected Root:', PROTECTED_ROOT)
except:
    print(f'no media root or pretected roo in {SETTINGS_MODULE}')



if DEBUG:
    import mimetypes
    mimetypes.add_type("application/javascript", ".js", True)

CORS_REPLACE_HTTPS_REFERER = False
HOST_SCHEME = "http://"
SECURE_PROXY_SSL_HEADER = None
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_HSTS_SECONDS = None
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_FRAME_DENY = False

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'